What is responsible for defining the routes of the games resource?

Routes are defined in the create_router.js file (as get /,get/:id, post / or post /:id etc)

--------------------------------------------------------------------------------------------------------------------
What do you notice about the folder structure? Whats the client responsible for? Whats the server responsible for?

Folder structure seperates out the rendering and processing (client side) from the data generation/storage (server side).  Client side uses HTML
and javascript to decide on the layout and content, as well as any computation of the data. Server side handles information swopping (i.e. express directs requests and submits them,
while MongoDB simply acts as deposit for data that can be ammended/added to or removed)


--------------------------------------------------------------------------------------------------------------------
What are the the responsibilities of server.js?

server translates requests and responses between the front end (Vue/HTML/JavaScript) and the backend database
--------------------------------------------------------------------------------------------------------------------

What are the responsibilities of the gamesRouter?

gamesRouter creates the routes that are used by any requests involving the gamesCollectiom. It hosts the address/routes to actions carried
out on the database
--------------------------------------------------------------------------------------------------------------------
What process does the the client (front-end) use to communicate with the server?

the client uses a form to collect info, before triggering a request via methods which call on methods within GamesService.js
the parse the data and submit to the server using the router methods. When it submits a request it waits for response and
makes changes based on response.

--------------------------------------------------------------------------------------------------------------------
What optional second argument does the fetch method take? And what is it used for in this application? Hint: See Using Fetch on the MDN docs

the fetch request can take a second argument that changes the conditions of the request. As the feth request defaults to a 'GET'
request, the second argument can ammend the request to be a 'POST','PUT or 'DELETE'

In this application the second argument is used in 'GamesService.js' as part of its 'POST and DELETE'(postGame and deleteGame) methods.

--------------------------------------------------------------------------------------------------------------------
Which of the games API routes does the front-end application consume (i.e. make requests to)?

The front end application makes use of the 'POST' request when it creates a new game using postGame (called in GameForm.vue, sent to GamesService.js
then onto the created router methods)

The front end application uses the 'GET' request to obtain the current list of games (called in GamesGrid.vue and sent to GamesService.js
before being sent on with router)

The front end application used the 'DELETE' request called initially from the GameCard.vue method 'deleteGame' which calls on the
GamesService.js method with same name (deleteGame) that submits request to router and on to database


--------------------------------------------------------------------------------------------------------------------
What are we using the MongoDB Driver for?

Connecting to the MongoDB database???

--------------------------------------------------------------------------------------------------------------------
Why do we need to use ObjectId from the MongoDB driver?

ObjectID is a unique reference point for any data stored in the MongoDB database. As the contents do not otherwise
have a pattern to match it is the only consistent reference point across contents
